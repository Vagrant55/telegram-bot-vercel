import fetch from 'node-fetch';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { message } = req.body;
  if (!message || !message.text) return res.status(200).json({ ok: true });

  const chatId = message.chat.id;
  const text = message.text;
  const firstName = message.from.first_name || "–ê–Ω–æ–Ω–∏–º";

  const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU";
  const ADMIN_CHAT_ID = 935264202;

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendText = async (toChatId, msg) => {
    const url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${toChatId}&text=${encodeURIComponent(msg)}`;
    try {
      await fetch(url);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  };

  // –ö–æ–º–∞–Ω–¥–∞ /start
  if (text === "/start") {
    await sendText(chatId, `‚úÖ –ü—Ä–∏–≤–µ—Ç, ${firstName}! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`);
    await sendText(ADMIN_CHAT_ID, `üì• –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ${firstName} (${chatId}) ‚Äî –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø (military/civil) –≤ —Ç–∞–±–ª–∏—Ü–µ!`);
    return res.status(200).json({ ok: true });
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ –í–°–ï–ú
  if (chatId == ADMIN_CHAT_ID && text.startsWith("/send_all ")) {
    const broadcastText = text.replace("/send_all ", "");
    const result = await sendToAll(broadcastText);
    await sendText(ADMIN_CHAT_ID, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –í–°–ï–ú –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.sent}\n‚ùå –û—à–∏–±–æ–∫: ${result.failed}`);
    return res.status(200).json({ ok: true });
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ –¢–û–õ–¨–ö–û –≤–æ–µ–Ω–Ω—ã–º
  if (chatId == ADMIN_CHAT_ID && text.startsWith("/send_military ")) {
    const broadcastText = text.replace("/send_military ", "");
    const result = await sendToType(broadcastText, 'military');
    await sendText(ADMIN_CHAT_ID, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –í–û–ï–ù–ù–´–ú –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.sent}\n‚ùå –û—à–∏–±–æ–∫: ${result.failed}`);
    return res.status(200).json({ ok: true });
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ –¢–û–õ–¨–ö–û –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º
  if (chatId == ADMIN_CHAT_ID && text.startsWith("/send_civil ")) {
    const broadcastText = text.replace("/send_civil ", "");
    const result = await sendToType(broadcastText, 'civil');
    await sendText(ADMIN_CHAT_ID, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ì–†–ê–ñ–î–ê–ù–°–ö–ò–ú –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${result.sent}\n‚ùå –û—à–∏–±–æ–∫: ${result.failed}`);
    return res.status(200).json({ ok: true });
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∞–¥–º–∏–Ω—É
  if (chatId == ADMIN_CHAT_ID && text === "/help") {
    await sendText(ADMIN_CHAT_ID, `
üìå –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
/send_all –¢–µ–∫—Å—Ç ‚Äî –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
/send_military –¢–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ–µ–Ω–Ω—ã–º
/send_civil –¢–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º
`);
    return res.status(200).json({ ok: true });
  }

  res.status(200).json({ ok: true });
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–°–ï–ú
async function sendToAll(text) {
  const SHEET_URL = "https://docs.google.com/spreadsheets/d/–í–ê–®_SPREADSHEET_ID/export?format=csv";
  let sent = 0, failed = 0;

  try {
    const response = await fetch(SHEET_URL);
    const csv = await response.text();
    const rows = csv.split('\n').slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    for (let row of rows) {
      if (!row.trim()) continue;
      const cols = row.split(',');
      const chatId = cols[0]?.trim();
      if (!chatId || chatId === 'chat_id') continue;

      try {
        await sendTextToTelegram(chatId, text);
        sent++;
      } catch (e) {
        failed++;
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", error);
  }

  return { sent, failed };
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ —Ç–∏–ø—É
async function sendToType(text, type) {
  const SHEET_URL = "https://docs.google.com/spreadsheets/d/1utCG8rmf449THR5g6SHvSK4pp6-nj7UEgSgP4H1_isc/export?format=csv";
  let sent = 0, failed = 0;

  try {
    const response = await fetch(SHEET_URL);
    const csv = await response.text();
    const rows = csv.split('\n').slice(1);

    for (let row of rows) {
      if (!row.trim()) continue;
      const cols = row.split(',');
      const chatId = cols[0]?.trim();
      const userType = cols[2]?.trim(); // –°—Ç–æ–ª–±–µ—Ü C ‚Äî —Ç–∏–ø

      if (!chatId || chatId === 'chat_id' || userType !== type) continue;

      try {
        await sendTextToTelegram(chatId, text);
        sent++;
      } catch (e) {
        failed++;
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", error);
  }

  return { sent, failed };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async function sendTextToTelegram(chatId, text) {
  const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU";
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}`;
  await fetch(url);
}
