import { createClient } from '@supabase/supabase-js';

// üß† In-memory –∫—ç—à –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è—è  –∞–¥–º–∏–Ω–æ–≤ 
const adminState = new Map();

// üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU";
const ADMIN_CHAT_IDS = [935264202, 1527919229];
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export default async function handler(req, res) {
  // –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
  if (req.url === '/test-supabase') {
    try {
      const { data, error } = await supabase.from('employees').select('count').single();
      console.log("–¢–µ—Å—Ç Supabase:", { data, error });
      return res.status(200).json({ 
        success: true, 
        message: 'Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç', 
        count: data?.count 
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Supabase:", err);
      return res.status(500).json({ 
        success: false, 
        error: err.message 
      });
    }
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { message, callback_query } = req.body;
  if (!message && !callback_query) return res.status(200).json({ ok: true });

  // üì• –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (message && message.text) {
    const chatId = message.chat.id;
    const text = message.text;

    // –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
    if (ADMIN_CHAT_IDS.includes(chatId) && adminState.has(chatId)) {
      const { type } = adminState.get(chatId);
      adminState.delete(chatId);
      const result = await sendBroadcast(text, type);
      await sendText(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${result.sent}`);
      return res.status(200).json({ ok: true });
    }

    // /start ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    if (text === "/start") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π", callback_data: "type_military" }],
          [{ text: "üëî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", callback_data: "type_civil" }]
        ]
      };
      await sendText(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø:", keyboard);
      return res.status(200).json({ ok: true });
    }

    // /menu ‚Äî –∞–¥–º–∏–Ω—ã
    if (ADMIN_CHAT_IDS.includes(chatId) && text === "/menu") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üì§ –í—Å–µ–º", callback_data: "send_all" }],
          [{ text: "üéñÔ∏è –í–æ–µ–Ω–Ω—ã–º", callback_data: "send_military" }],
          [{ text: "üëî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º", callback_data: "send_civil" }]
        ]
      };
      await sendText(chatId, "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", keyboard);
      return res.status(200).json({ ok: true });
    }
  }

  // üéØ –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
  if (callback_query) {
    const chatId = callback_query.message.chat.id;
    const data = callback_query.data;
    const name = callback_query.from.first_name || "–ê–Ω–æ–Ω–∏–º";

    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø
    if (data === 'type_military' || data === 'type_civil') {
      const type = data === 'type_military' ? 'military' : 'civil';
      await saveEmployee(chatId, name, type);
      await sendText(chatId, `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${type === 'military' ? '–í–æ–µ–Ω–Ω—ã–π' : '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π'}.`);
      return res.status(200).json({ ok: true });
    }

    // –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
    if (ADMIN_CHAT_IDS.includes(chatId)) {
      if (data === 'send_all' || data === 'send_military' || data === 'send_civil') {
        const typeMap = {
          'send_all': '–≤—Å–µ–º',
          'send_military': '–≤–æ–µ–Ω–Ω—ã–º',
          'send_civil': '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º'
        };
        adminState.set(chatId, { type: data.replace('send_', '') });
        await sendText(chatId, `üì© –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è: ${typeMap[data]}`);
        return res.status(200).json({ ok: true });
      }
    }
  }

  res.status(200).json({ ok: true });
}

// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendText(chatId, text, replyMarkup = null) {
  const url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}`;
  if (replyMarkup) url += `&reply_markup=${encodeURIComponent(JSON.stringify(replyMarkup))}`;
  await fetch(url, { method: 'GET' });
}

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function saveEmployee(chatId, name, type) {
  console.log("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:", { chatId, name, type });
  
  try {
    const { data, error } = await supabase
      .from('employees')
      .upsert({ chat_id: chatId, name, type }, { onConflict: 'chat_id' });
    
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", { data, error });
    
    if (error) {
      console.error("–û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
      return false;
    }
    return true;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (catch):", err);
    return false;
  }
}

// üì¢ –†–∞—Å—Å—ã–ª–∫–∞
async function sendBroadcast(text, type) {
  console.log("–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:", { text, type });
  
  try {
    const { data, error } = type === 'all' 
      ? await supabase.from('employees').select('chat_id')
      : await supabase.from('employees').select('chat_id').eq('type', type);

    console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", { data, error });
    
    if (error) {
      console.error("–û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ:", error);
      return { sent: 0 };
    }

    let sent = 0;
    for (const { chat_id } of data || []) {
      try {
        await sendText(chat_id, text);
        sent++;
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
      }
    }
    console.log("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", { sent });
    return { sent };
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ (catch):", err);
    return { sent: 0 };
  }
}
