import { createClient } from '@supabase/supabase-js';

// üß† –ü—Ä–æ—Å—Ç–æ–π  in-memory –∫—ç—à   –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
const adminState = new Map();

// üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏
const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU"; // ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
const ADMIN_CHAT_IDS = [935264202, 1527919229]; // ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id

// üßë‚Äçüíº –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã (Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST)
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const { message, callback_query } = req.body;

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (!message && !callback_query) return res.status(200).json({ ok: true });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (message && message.text) {
    const chatId = message.chat.id;
    const text = message.text;

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
    if (ADMIN_CHAT_IDS.includes(chatId) && adminState.has(chatId)) {
      const { type } = adminState.get(chatId);
      adminState.delete(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      const result = await sendBroadcast(text, type);
      await sendText(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${result.sent}`);
      return res.status(200).json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    if (text === "/start") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π", callback_data : "type_military" }],
          [{ text: "üëî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", callback_data : "type_civil" }]
        ]
      };
      await sendText(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø:", keyboard);
      return res.status(200).json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (ADMIN_CHAT_IDS.includes(chatId) && text === "/menu") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–°–ï–ú", callback_data : "send_all" }],
          [{ text: "üéñÔ∏è –¢–æ–ª—å–∫–æ –≤–æ–µ–Ω–Ω—ã–º", callback_data : "send_military" }],
          [{ text: "üëî –¢–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º", callback_data : "send_civil" }]
        ]
      };
      await sendText(chatId, "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", keyboard);
      return res.status(200).json({ ok: true });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  if (callback_query) {
    const chatId = callback_query.message.chat.id;
    const data = callback_query.data;
    const name = callback_query.from.first_name || "–ê–Ω–æ–Ω–∏–º";

    // üëâ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø
    if (data === 'type_military' || data === 'type_civil') {
      const type = data === 'type_military' ? 'military' : 'civil';
      await saveEmployee(chatId, name, type); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
      await sendText(chatId, `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${type === 'military' ? '–í–æ–µ–Ω–Ω—ã–π' : '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π'}.`);
      return res.status(200).json({ ok: true });
    }

    // üëâ –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    if (ADMIN_CHAT_IDS.includes(chatId)) {
      if (data === 'send_all' || data === 'send_military' || data === 'send_civil') {
        const typeMap = {
          'send_all': '–≤—Å–µ–º',
          'send_military': '–≤–æ–µ–Ω–Ω—ã–º',
          'send_civil': '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º'
        };
        adminState.set(chatId, { type: data.replace('send_', '') });
        await sendText(chatId, `üì© –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è: ${typeMap[data]}\n(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç)`);
        return res.status(200).json({ ok: true });
      }
    }
  }

  res.status(200).json({ ok: true });
}

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendText(chatId, text, replyMarkup = null) {
  let url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}`;
  if (replyMarkup) {
    url += `&reply_markup=${encodeURIComponent(JSON.stringify(replyMarkup))}`;
  }
  await fetch(url, { method: 'GET' });
}

// üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function saveEmployee(chatId, name, type) {
  // üîé –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (typeof chatId !== 'number') {
    console.error('‚ùå chatId –Ω–µ —á–∏—Å–ª–æ:', chatId, typeof chatId);
    return;
  }
  if (!name || typeof name !== 'string') {
    name = '–ê–Ω–æ–Ω–∏–º'; // –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
  }
  if (!['military', 'civil'].includes(type)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø:', type);
    return;
  }

  console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º:', { chat_id: chatId, name, type });

  const { error } = await supabase
    .from('employees')
    .upsert(
      { chat_id: chatId, name, type },
      { onConflict: 'chat_id' }
    );

  if (error) {
    console.error('‚ùå Supabase –æ—à–∏–±–∫–∞:', error);
  } else {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
  }
}

// üì¢ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Ç–∏–ø—É
async function sendBroadcast(text, type) {
  const { data, error } = type === 'all'
    ? await supabase.from('employees').select('chat_id')
    : await supabase.from('employees').select('chat_id').eq('type', type);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ Supabase:', error);
    return { sent: 0 };
  }

  let sent = 0;
  for (const { chat_id } of data || []) {
    try {
      await sendText(chat_id, text);
      sent++;
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${e.message}`);
    }
  }

  return { sent };
}
