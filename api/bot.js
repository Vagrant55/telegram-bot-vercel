import { google } from 'googleapis';

// üß† –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
const adminState = new Map();

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { message, callback_query } = req.body;

  // üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏
  const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU";
  const ADMIN_CHAT_IDS = [935264202]; // ‚Üê –î–æ–±–∞–≤—å—Ç–µ chat_id –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  const SPREADSHEET_ID = "1utCG8rmf449THR5g6SHvSK4pp6-nj7UEgSgP4H1_isy";

  // üßë‚Äçüíº –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Google ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–≤–æ—ë
  const SERVICE_ACCOUNT = {
 "type": "service_account",
  "project_id": "kaf-471314",
  "private_key_id": "f185db2532f1a547e1970688f943c79e23d1245c",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC034SsIislFzCd\nZGa/18iBlNxUCA8yS1+jX8FT4ceDwxvuPYlBLlyF4WZx9KfVbqJMVhUnrvmv3vhz\nyqkWkPzMQzOHvjF6STnCUHTtLZMTZRhirHzq7FEQgpwOnWukzyL+L8cmRY6EwjEK\nBhYB8ZfRUiao/mHDbzoBSOljpzfhRXuD1adMedMbEY+OHXiUj/0o8XR/SfCVDwj6\n0YD6Z2ycS8aa1yyiMeDgwTR/RIlXyvm2AOYFOPFFwSugtcJm4U9eze0zTYnvGzAw\nliaHoQEcoQcIBPJLXUMiXpt1kc+h75DmPwfgHigI0rn01QzXg/T1rbZBd1E3cxUD\noY4vj89BAgMBAAECggEACCJ7YZCB1z+1QIbo9hza2DUdOaxJHq50JTFjzQV9ByiJ\nw4vB9gwDPkQ2as6hk8BPjVZbyjac5TOGghKtyyWHMRqeoS7FI+ZSMjKTJ62ijT9B\nOwLd9WTeensdUKz0z+s+/Cai8s4zDDZ9pSFD8R9wAAqNUZFrTTJd7fvc/03gfgGi\nBrZ8tWCdgkmr/lTIpYbUzSgyMl0dJHeNp6X9jQbYbbEv+t58R36ZLq7YGkdLGfB0\nW1kLEaDxxY+m+wxkleICvZHtPfFsoueC52Fm8BlW6w2Fz/xFIWimIs2VhiqN3TRs\n9jgAs0Y1NJpdCZuRjKVLYaYtnWHxOn6kMmmDf/666QKBgQDvY7i5L78d26yfPS0m\nqdSQPAZOWnMCB4MwNUevmdPq6CB4YF4kCvZzOubrTmwClzaAoPyM1i7PkulqeV5j\nhaUoJWYnxFHgTVIGcODia5pFvVMIR8T49ZlaPg7u05nXGcufl+6I3XhH1VKej5YW\nLjH8jynLlx7Mvv8VEWWIFnRMPQKBgQDBbF53vjRxVjiTYgZW1zErhqYoIubeb0LK\n5qkGOdlA84/d4Pk3Uc23n1YdJUKKjbj4FCg527PlHjM1FdnxYJjQn+Cv8tr0memp\nsXAEL3UT13im2tHgnBeWxrf06pI4N1d5vWcg4XpdMw9nFzL20QaUTpUA+z6gI4Wd\nRrlyk7lrVQKBgQDcqXVK7mIiqa1TE1cdPoq7cTj23JUKl9Yrh9FOYmNfMx1LGLlu\nS9SknvTgject9Ci/JKXnRD7eA7O4+6sv3a9BdEfX/DTkpyEm4sHItBr+keeJyG4e\ndnUnI/Er4Ez8Y8C4mZm8+zi2LkL7+asFQwu8nFKQYfp4DM6gouqOKPSGmQKBgFX2\nGY3SBHCSRxaJLBQQExQrBVE1IbGddOvD0z6nGvyYwklzoI6LVofS0mylkIsPLTNj\nkfUUxUCASXXAPlnd+kxNoYfQwKqQdJ4r84KIrNmim0ZcXYYbGQizTDIWxeEiB0hd\neqXMT5t4A9JnJwk2IFxtCB+liVGWN92L/wMC0Bb5AoGAFJafzUtun5kpnPRbvwaA\nwZf0ZwskmoLQR3Dam7DNmw6aPkwgBSEqGgwv1R4Z3swTPjzKbQfyiUdxbfUMFl8K\nRel5LsMW3wJ03HEZKQ8NZUytHj+oAP0dUZ4bULcv0M/43rOXZSPgrRmxWb7kWn+g\nGo9AQFuW6NGMTR2Ek37sw5U=\n-----END PRIVATE KEY-----\n",
  "client_email": "id-22-bot@kaf-471314.iam.gserviceaccount.com",
  "client_id": "118228097079633655651",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/id-22-bot%40kaf-471314.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
  };

  // üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendText = async (toChatId, msg, replyMarkup = null) => {
    let url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${toChatId}&text=${encodeURIComponent(msg)}`;
    if (replyMarkup) {
      url += `&reply_markup=${encodeURIComponent(JSON.stringify(replyMarkup))}`;
    }
    await fetch(url, { method: 'GET' });
  };

  // ‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const editMessage = async (chatId, messageId, text, replyMarkup = null) => {
    let url = `https://api.telegram.org/bot${TOKEN}/editMessageText?chat_id=${chatId}&message_id=${messageId}&text=${encodeURIComponent(text)}`;
    if (replyMarkup) {
      url += `&reply_markup=${encodeURIComponent(JSON.stringify(replyMarkup))}`;
    }
    await fetch(url, { method: 'GET' });
  };

  // üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (message && message.text) {
    const chatId = message.chat.id;
    const text = message.text;

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
    if (ADMIN_CHAT_IDS.includes(chatId) && adminState.has(chatId)) {
      const { type } = adminState.get(chatId);
      adminState.delete(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      const result = await sendBroadcast(text, type, SERVICE_ACCOUNT, SPREADSHEET_ID);
      await sendText(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì§ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${result.sent}\n‚ùå –û—à–∏–±–æ–∫: ${result.failed}`);
      return res.status(200).json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (text === "/start") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π", callback_ "type_military" }],
          [{ text: "üëî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", callback_ "type_civil" }]
        ]
      };
      await sendText(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø:", keyboard);
      return res.status(200).json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (ADMIN_CHAT_IDS.includes(chatId) && text === "/menu") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–°–ï–ú", callback_ "send_all" }],
          [{ text: "üéñÔ∏è –¢–æ–ª—å–∫–æ –≤–æ–µ–Ω–Ω—ã–º", callback_ "send_military" }],
          [{ text: "üëî –¢–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º", callback_ "send_civil" }]
        ]
      };
      await sendText(chatId, "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", keyboard);
      return res.status(200).json({ ok: true });
    }
  }

  // üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  if (callback_query) {
    const chatId = callback_query.message.chat.id;
    const messageId = callback_query.message.message_id;
    const data = callback_query.data;

    // üëâ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø
    if (data === 'type_military' || data === 'type_civil') {
      const type = data === 'type_military' ? 'military' : 'civil';
      const name = callback_query.from.first_name || "–ê–Ω–æ–Ω–∏–º";
      await saveEmployee(chatId, name, type, SERVICE_ACCOUNT, SPREADSHEET_ID);
      await editMessage(chatId, messageId, `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${type === 'military' ? '–í–æ–µ–Ω–Ω—ã–π' : '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π'}. –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`);
      await sendText(ADMIN_CHAT_IDS[0], `üì• –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ${name} (${chatId}) ‚Äî —Ç–∏–ø: ${type}`);
      return res.status(200).json({ ok: true });
    }

    // üëâ –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    if (ADMIN_CHAT_IDS.includes(chatId)) {
      if (data === 'send_all' || data === 'send_military' || data === 'send_civil') {
        const typeMap = {
          'send_all': '–≤—Å–µ–º',
          'send_military': '–≤–æ–µ–Ω–Ω—ã–º',
          'send_civil': '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º'
        };
        adminState.set(chatId, { type: data.replace('send_', '') });
        await editMessage(chatId, messageId, `üì© –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è: ${typeMap[data]}\n(–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç)`);
        return res.status(200).json({ ok: true });
      }
    }
  }

  res.status(200).json({ ok: true });
}

// üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function saveEmployee(chatId, name, type, serviceAccount, spreadsheetId) {
  const auth = new google.auth.JWT({
    email: serviceAccount.client_email,
    key: serviceAccount.private_key,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  await auth.authorize();

  const sheets = google.sheets({ version: 'v4', auth });

  const response = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: 'A:A',
  });

  const values = response.data.values || [];

  for (let i = 0; i < values.length; i++) {
    if (values[i][0] == chatId) {
      await sheets.spreadsheets.values.update({
        spreadsheetId,
        range: `C${i + 1}`,
        valueInputOption: 'RAW',
        resource: {
          values: [[type]]
        }
      });
      return;
    }
  }

  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: 'A:C',
    valueInputOption: 'RAW',
    resource: {
      values: [[chatId, name, type]]
    }
  });
}

// üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–∏–ø—É
async function sendBroadcast(text, type, serviceAccount, spreadsheetId) {
  const auth = new google.auth.JWT({
    email: serviceAccount.client_email,
    key: serviceAccount.private_key,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  await auth.authorize();

  const sheets = google.sheets({ version: 'v4', auth });

  const response = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: 'A:C',
  });

  const rows = response.data.values || [];
  let sent = 0, failed = 0;

  for (let row of rows) {
    const chatId = row[0];
    const userType = row[2];

    if (!chatId || chatId === 'chat_id') continue;
    if (type !== 'all' && userType !== type) continue;

    try {
      const url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}`;
      await fetch(url, { method: 'GET' });
      sent++;
    } catch (e) {
      failed++;
    }
  }

  return { sent, failed };
}
